[{"path":"https://Claudius-Appel.github.io/duflor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudius Appel. Author, maintainer.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Appel C (2024). duflor: Plant Image Analysis Determination Leaf- Root-Area. R package version 0.0.1.9016, https://Claudius-Appel.github.io/duflor/.","code":"@Manual{,   title = {duflor: Plant Image Analysis For Determination of Leaf- and Root-Area},   author = {Claudius Appel},   year = {2024},   note = {R package version 0.0.1.9016},   url = {https://Claudius-Appel.github.io/duflor/}, }"},{"path":[]},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"Duflor package detect quantify number pixels subrange(s) HSV-color space declared upper lower bound. package principally task-agnostic work sort HSV-range(s), developed detection quantification plant area.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"can install development release versions duflor like : help-vignettes downloaded, use instead: Vignettes rendered documents discussing specific topics within package. Installing recommended, required utilising package .","code":"# release devtools::install_github(\"https://github.com/Claudius-Appel/duflor@master\") # development devtools::install_github(\"https://github.com/Claudius-Appel/duflor@dev\") devtools::install_github(\"https://github.com/Claudius-Appel/duflor@master\"   ,build_vignettes = T) devtools::install_github(\"https://github.com/Claudius-Appel/duflor@dev\"   ,build_vignettes = T)"},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"prerequisites","dir":"","previous_headings":"Installation","what":"Prerequisites","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"Installing package GitHub requires installation R-package devtools:","code":"install.packages(\"devtools\")"},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"function [load_all()] can optionally load subsets image; information see documentation. allow work, package RBioFormats required. Refer documentation installing package.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"detailed documentation, refer https://claudius-appel.github.io/duflor/ Additionally, various topics detailed articles, accessible aforementioned website, well within R via browseVignettes(). access within R possible, generally recommended view articles via website.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/index.html","id":"a-small-sidenote-on-options-set-by-duflor","dir":"","previous_headings":"Usage","what":"A small sidenote on options set by duflor:","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"Upon loading, duflor set following options via options(XX): drought leaf-area green leaf-area complete leaf-area identifier area duflor.default_identifier_area: size identifier_dot [cm^2]. values can retrieved via getOption(option). duflor.default_hsv_spectrums merely used shortcut load currently-set default hsv ranges. intended modified; serves internal use. duflor.default_identifier_area likely require modification. calculating area spectrum via duflor::pixels_to_area(pixel.counts), true area identifier-dot must set via option. default set 0.503. areas assumed [cm^2].","code":"getOption(\"duflor.default_hsv_spectrums\") getOption(\"duflor.default_identifier_area\")"},{"path":[]},{"path":"https://Claudius-Appel.github.io/duflor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Claudius Appel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"function assigns clusters coordinate-pairs pixel.idx. cluster contains pixels share non-diagonal link .","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"","code":"adjacency(pixel.idx)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"pixel.idx pixel.idx-object","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"means points (1/1), (1/2) (2/2) assigned cluster, whereas points  (5/5) (6/6) assigned separate clusters. consider diagonal matches well, see diagonal_adjacency() Reference: https://stackoverflow.com//37946855","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/apply_hsv_color_to_image_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"apply hsv-color index-located pixels array","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/apply_hsv_color_to_image_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"","code":"apply_hsv_color_to_image_subset(   pixel.array,   pixel.idx,   target.color.hsv,   mask_extreme = FALSE )"},{"path":"https://Claudius-Appel.github.io/duflor/reference/apply_hsv_color_to_image_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color.hsv hsv-formatted color apply mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/apply_hsv_color_to_image_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"modified pixel.array","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/change_pixel_color_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"handles color-translation character-name hsv returns results duflor::apply_hsv_color_to_image_subset()","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/change_pixel_color_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"","code":"change_pixel_color_HSV(pixel.array, pixel.idx, target.color, mask_extreme)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/change_pixel_color_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/change_pixel_color_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/convert_pixels_to_area.html","id":null,"dir":"Reference","previous_headings":"","what":"convert pixel counts to an area based on the known area of an identifier-dot. — convert_pixels_to_area","title":"convert pixel counts to an area based on the known area of an identifier-dot. — convert_pixels_to_area","text":"convert pixel counts area based known area identifier-dot.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/convert_pixels_to_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert pixel counts to an area based on the known area of an identifier-dot. — convert_pixels_to_area","text":"","code":"convert_pixels_to_area(pixel.counts)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/convert_pixels_to_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert pixel counts to an area based on the known area of an identifier-dot. — convert_pixels_to_area","text":"pixel.counts list containing following pixel-counts: \"green\" \"drought\" \"complete\" \"identifier\" pixel-count identifier must present, whereas others optional. calculated area internally unit-less. However, default value duflor.default_identifier_area 0.503 [cm^2], areas computed function also [cm^2]. assumed area identifier can modified excuting options(duflor.default_identifier_area = <value_in_square_centimeters>) prior calling function","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/convert_pixels_to_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert pixel counts to an area based on the known area of an identifier-dot. — convert_pixels_to_area","text":"list computed areas key listed pixel.counts. Additionally, two meta-values returned well: identifier-area used calculating area (whichever value set option duflor.default_identifier_area) area singe pixel values [cm^2]","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/diagonal_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"function assigns clusters coordinate-pairs pixel.idx. cluster contains pixels share diagonal link .","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/diagonal_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"","code":"diagonal_adjacency(pixel.idx)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/diagonal_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"pixel.idx list declaring pixels target.color.hsv applied","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/diagonal_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/diagonal_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"means points (1/1), (1/2) (2/2) assigned cluster. Additionally, points  (5/5) (6/6) assigned cluster. consider diagonal matches well, see adjacency() Reference: https://stackoverflow.com//37946855","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-main_args.html","id":null,"dir":"Reference","previous_headings":"","what":"pseudo-function to define default parameter documentation — .main_args","title":"pseudo-function to define default parameter documentation — .main_args","text":"pseudo-function define default parameter documentation","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-main_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pseudo-function to define default parameter documentation — .main_args","text":"","code":".main_args(   pixel.array = NA,   indicator.array = NA,   pixel.idx = NA,   target.color = NA,   target.color.hsv = NA,   image.path = NA,   plot_indicator = NA,   get_indicator = NA,   mask_extreme = NA,   fast_eval = NA,   return_hsv = NA,   subset_only = NA,   upper_bound = NA,   lower_bound = NA,   crop_left = NA,   crop_right = NA,   crop_top = NA,   crop_bottom = NA )"},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-main_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pseudo-function to define default parameter documentation — .main_args","text":"pixel.array image array loaded via duflor::load_image() indicator.array pixel.array returned pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() target.color.hsv hsv-formatted color apply image.path path image-file plot_indicator control whether indicator image plotted get_indicator control whether target pixels get colored indicator-images mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.) fast_eval Use C++-code possible reduce execution time? return_hsv TRUE default. Controls whether function returns pixel-data HSV-colorspace RGB subset_only want load subset range values upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values lower_bound see upper_bound crop_left number pixels crop left edge image crop_right see crop_left crop_top see crop_left crop_bottom see crop_left","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-main_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pseudo-function to define default parameter documentation — .main_args","text":"nothing. function literally nothing ","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — .onAttach","title":"Title — .onAttach","text":"Title","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — .onAttach","text":"libname . pkgname .","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onAttach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — .onAttach","text":".","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"onLoad-routine: Initialises package configuration — .onLoad","title":"onLoad-routine: Initialises package configuration — .onLoad","text":"function initialises various options used package upon loading: notably, initialises javaVM required loading subsets images. following options initialised: duflor.default_hsv_spectrums duflor.default_identifier_area duflor.java_available duflor.RBF_available","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"onLoad-routine: Initialises package configuration — .onLoad","text":"","code":".onLoad(lib, pkg)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"onLoad-routine: Initialises package configuration — .onLoad","text":"lib / pkg /","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onLoad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"onLoad-routine: Initialises package configuration — .onLoad","text":"Rules initialisation JavaVM: default, JVM initialised 900MB heap space values lower 900MB ignored, rule 1) takes effect. set custom values, execute option(duflor.java_heapspace_in_MB) loading package (see notes )","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onLoad.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"onLoad-routine: Initialises package configuration — .onLoad","text":"package pkg attached (see Link ) via library(pkg), first time function package pkg called via pkg::fun(), function gets called. package runs java.lang.OutOfMemoryError: Java heap space-error loading images via load_image(), heapspace JVM sufficiently large. resolve issue, save work initialise new R-session execute option(duflor.java_heapspace_in_MB) value >900MB load duflor via library(duflor) calling duflor::any_function() optionally check console output validate correct value set.","code":""},{"path":[]},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onUnLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"onUnLoad-routine: Tears down package configuration — .onUnLoad","title":"onUnLoad-routine: Tears down package configuration — .onUnLoad","text":"function unsets various options used package:","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onUnLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"onUnLoad-routine: Tears down package configuration — .onUnLoad","text":"","code":".onUnLoad(lib, pkg)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onUnLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"onUnLoad-routine: Tears down package configuration — .onUnLoad","text":"lib / pkg /","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/dot-onUnLoad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"onUnLoad-routine: Tears down package configuration — .onUnLoad","text":"\"duflor.default_hsv_spectrums\" \"duflor.default_identifier_area\" \"duflor.java_available\" \"duflor.RBF_available\" \"duflor..used_JVM_heapspace\" \"duflor..used_JVM_heap_unit\"","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/duflor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","title":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","text":"Determine 2-dimensional plant area via known area identifier dot.","code":""},{"path":[]},{"path":"https://Claudius-Appel.github.io/duflor/reference/duflor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","text":"Maintainer: Claudius Appel claudius.appel@freenet.de","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/extract_pixels_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract pixels from image which fall inbetween lower- and upper bounds. — extract_pixels_HSV","title":"Extract pixels from image which fall inbetween lower- and upper bounds. — extract_pixels_HSV","text":"Extract pixels image fall inbetween lower- upper bounds.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/extract_pixels_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract pixels from image which fall inbetween lower- and upper bounds. — extract_pixels_HSV","text":"","code":"extract_pixels_HSV(pixel.array, lower_bound, upper_bound, fast_eval = FALSE)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/extract_pixels_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract pixels from image which fall inbetween lower- and upper bounds. — extract_pixels_HSV","text":"pixel.array image array loaded via duflor::load_image() lower_bound see upper_bound upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values fast_eval Use C++-code possible reduce execution time?","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/extract_pixels_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract pixels from image which fall inbetween lower- and upper bounds. — extract_pixels_HSV","text":"EITHER: list-object following elements (supplying one one pair bounds) pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array list-object following elements (supplying one one pair bounds) pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array indicator.img - pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_indicator_image.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"wrapper around change_pixel_color_HVS() intention clarity.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_indicator_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"","code":"get_indicator_image(pixel.array, pixel.idx, target.color, mask_extreme)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_indicator_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_indicator_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_javaVM_exceptions.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve exceptions of the JVM — get_javaVM_exceptions","title":"retrieve exceptions of the JVM — get_javaVM_exceptions","text":"check JVM pending exceptions, clear return TRUE exceptions found.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_javaVM_exceptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve exceptions of the JVM — get_javaVM_exceptions","text":"","code":"get_javaVM_exceptions()"},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_javaVM_exceptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve exceptions of the JVM — get_javaVM_exceptions","text":"boolean value whether JVM contained exceptions.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_unique_list_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"keys' contents considered. presence absence key relevant.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_unique_list_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"","code":"get_unique_list_elements(a, b)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_unique_list_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"list b list","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_unique_list_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"vector elements present either b.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/get_unique_list_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"","code":"duflor:::get_unique_list_elements(list(a = 1,b =2,c= 3),list(a = 1,b = 1,d = 3)) #> [1] \"c\" \"d\""},{"path":"https://Claudius-Appel.github.io/duflor/reference/HSVtoRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::HSVtoRGB() — HSVtoRGB","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"See imager::HSVtoRGB","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/HSVtoRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"","code":"HSVtoRGB(...)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/HSVtoRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"... Arguments passed imager::HSVtoRGB im image","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/load_image.html","id":null,"dir":"Reference","previous_headings":"","what":"load image as HSV or RGB-array — load_image","title":"load image as HSV or RGB-array — load_image","text":"load image HSV RGB-array","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/load_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load image as HSV or RGB-array — load_image","text":"","code":"load_image(   image.path,   subset_only = FALSE,   return_hsv = TRUE,   crop_left = 0,   crop_right = 0,   crop_top = 0,   crop_bottom = 0 )"},{"path":"https://Claudius-Appel.github.io/duflor/reference/load_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load image as HSV or RGB-array — load_image","text":"image.path path image-file subset_only want load subset range values return_hsv TRUE default. Controls whether function returns pixel-data HSV-colorspace RGB crop_left number pixels crop left edge image crop_right see crop_left crop_top see crop_left crop_bottom see crop_left","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/load_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load image as HSV or RGB-array — load_image","text":"hsv-formatted pixel.array, unless HSV==false.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/load_image.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"load image as HSV or RGB-array — load_image","text":"load_image() allows loading subsets images using RBioFormats::read.image(), turn relies upon package rJava. setup RBioFormats, refer https://github.com/aoles/RBioFormats?tab=readme-ov-file#installation.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/norm_to_range_01.html","id":null,"dir":"Reference","previous_headings":"","what":"normalise a vector to range 0-1 — norm_to_range_01","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"normalise vector range 0-1","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/norm_to_range_01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"","code":"norm_to_range_01(x)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/norm_to_range_01.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"x vector normalise range 0-1","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/norm_to_range_01.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"vector, normalised range 0-1","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/objs.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around object.size() — objs","title":"wrapper around object.size() — objs","text":"wrapper around object.size()","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/objs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around object.size() — objs","text":"","code":"objs(x)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/objs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around object.size() — objs","text":"x object retrive memory size ","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/objs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around object.size() — objs","text":"size x GB","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/objs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around object.size() — objs","text":"","code":"duflor:::objs(1:1:500000) #> 0.002000048 GB"},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_array_as_image_sRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"plot rgb-array via graphics-package","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_array_as_image_sRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"","code":"plot_array_as_image_sRGB(rgb.array, main = \"title\")"},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_array_as_image_sRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"rgb.array rgb-formatted image-array. main title pot plot sub-title. usually rendered properly","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_array_as_image_sRGB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"/","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_array_as_image_sRGB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"","code":"if (FALSE) { plot_array_as_image_sRGB(     HSVtoRGB(         imager::load.example(\"parrots\")         ),     main = str_c(\"parrots-example\") ) }"},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_indicator_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot indicator-image for a given spectrum — plot_indicator_image","title":"Plot indicator-image for a given spectrum — plot_indicator_image","text":"convenience- clarity-wrapper around plot_array_as_image_sRGB()","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_indicator_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot indicator-image for a given spectrum — plot_indicator_image","text":"","code":"plot_indicator_image(indicator.array, spectrum_name)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_indicator_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot indicator-image for a given spectrum — plot_indicator_image","text":"indicator.array pixel.array  modified hsv-values pixels. See get_indicator_image() details. Values expected HSV color-space. spectrum_name name plotted spectrum","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/plot_indicator_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot indicator-image for a given spectrum — plot_indicator_image","text":"/","code":""},{"path":[]},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"Takes HSV-formatted pixel.array bounds. determining pixels lie within bounds, hue- saturation- values respected. value-component considered.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"","code":"rectangularRange_HSV(pixel.array, upper_bound, lower_bound)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"pixel.array image array loaded via duflor::load_image() upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values lower_bound see upper_bound","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"upon success, returns list-object following elements: pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array Upon failure find matching pixels, empty matrix dimensions [0, 1:2] returned","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"use  rectangularRange_HSV_cpp() strongly suggested due drastically faster execution. Adopted countcolors::rectangularRange, reworked work HSV color space instead RGB simplified.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"","code":"if (FALSE) { rectangularRange_HSV(     pixel.array = pixel.array,     lower_bound = an_lower_bound,     upper_bound = an_upper_bound ) }"},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","title":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","text":"'C++'-implementation rectangularRange_HSV()","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","text":"","code":"rectangularRange_HSV_cpp(H, S, V, upper_bound, lower_bound, image_width)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","text":"H respective component pixel.array S respective component pixel.array V respective component pixel.array upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values lower_bound see upper_bound image_width Width pixel.array, returned via dim(pixel.array)[1]","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","text":"list-object following elements (supplying one one pair bounds) pixel.idx - pixel-locations pixels detected lower upper bound. Upon failure find matching pixels, empty matrix dimensions [0, 1:2] returned.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/rectangularRange_HSV_cpp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"'C++'-implementation of rectangularRange_HSV() — rectangularRange_HSV_cpp","text":"use  rectangularRange_HSV() strongly discouraged favour function, due drastically slower execution.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/reinitialise_javaVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Reinitalises JVM with previously used parameters — reinitialise_javaVM","title":"Reinitalises JVM with previously used parameters — reinitialise_javaVM","text":"Used internally load_image(). get_javaVM_exceptions() found exceptions, function called re-initialises JVM provided values. issues warning suggesting re-initialise value loading package.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/reinitialise_javaVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reinitalises JVM with previously used parameters — reinitialise_javaVM","text":"","code":"reinitialise_javaVM(heapspace = NA, unit = NA, pkg)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/reinitialise_javaVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reinitalises JVM with previously used parameters — reinitialise_javaVM","text":"heapspace integer heapspace allocated new JVM. omitted, contents getOption(\"duflor..used_JVM_heapspace\") used. unit unit heapspace. Must either c(\"g\",\"m\"). omitted, contents getOption(\"duflor..used_JVM_heap_unit\") used. pkg return-value packageName()","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/retrieve_adjacency_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"return coordinates cluster_id pixel.idx","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/retrieve_adjacency_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"","code":"retrieve_adjacency_coords(pixel.idx, cluster_id)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/retrieve_adjacency_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"pixel.idx list declaring pixels target.color.hsv applied cluster_id index --retrieved cluster","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/retrieve_adjacency_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/retrieve_adjacency_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"","code":"if (FALSE) { pixels <- extract_pixels_HSV(...) # extract pixels of a certain color-range adjacency <- adjacency(pixels$identifier$pixel.idx) # assign clusters coords <- retrieve_adjacency_coords(adjacency,1) # retrieve coordinates of first cluster  plot_array_as_image_sRGB( # display result     HSVtoRGB(         change_pixel_color_HSV(             pixel.array,             coords,             target.color = \"white\",             mask_extreme = T             )         )     ) }"},{"path":"https://Claudius-Appel.github.io/duflor/reference/RGBtoHSV.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::RGBtoHSV() — RGBtoHSV","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"See imager::RGBtoHSV","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/RGBtoHSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"","code":"RGBtoHSV(...)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/RGBtoHSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"... Arguments passed imager::RGBtoHSV im image","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/sRGBtoRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"See imager::sRGBtoRGB","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/sRGBtoRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"","code":"sRGBtoRGB(...)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/sRGBtoRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"... Arguments passed imager::sRGBtoRGB im image","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/validate_mask_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","title":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","text":"Check given spectrum's mask pixels edges part masked spectrum. suggest bounding area set restrictively, cutting pixels potentially valid mask.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/validate_mask_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","text":"","code":"validate_mask_edges(mask.idx, mask_name, array_dim, image.path)"},{"path":"https://Claudius-Appel.github.io/duflor/reference/validate_mask_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","text":"mask.idx pixel-locations pixels detected mask mask_name mask's name, print useful warnings array_dim dimensions loaded pixel.array image.path path image-file","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/validate_mask_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","text":"list booleans edge. TRUE values signify given boundary infringed upon.","code":""},{"path":"https://Claudius-Appel.github.io/duflor/reference/validate_mask_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for a given mask pixel.idx-object if its edges are clean — validate_mask_edges","text":"","code":"if (FALSE) { # load a subset of an image pixel.array <- duflor::load_image(image.path,                                   subset_only = T,                                   crop_left = 20,                                   crop_right = 20,                                   crop_bottom = 20,                                   crop_top = 20                                   )  # get pixels which belong to a given mask, and return the results for it ret <- extract_pixels_HSV(pixel.array, lower_bound, upper_bound, F)  # check for each mask if its edges are valid. for (mask in names(ret)) {     duflor:::validate_mask_edges(ret[[mask]]$pixel.idx,mask, dim(pixel.array)[1:2],image.path) } }"}]
