[{"path":"https://github.com/Claudius-Appel/duflor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Claudius Appel. Author, maintainer.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Appel C (2024). duflor: Plant Image Analysis Determination Leaf- Root-Area. R package version 0.0.1.9007, https://github.com/Claudius-Appel/duflor/.","code":"@Manual{,   title = {duflor: Plant Image Analysis For Determination of Leaf- and Root-Area},   author = {Claudius Appel},   year = {2024},   note = {R package version 0.0.1.9007},   url = {https://github.com/Claudius-Appel/duflor/}, }"},{"path":"https://github.com/Claudius-Appel/duflor/index.html","id":"duflor","dir":"","previous_headings":"","what":"Plant Image Analysis For Determination of Leaf- and Root-Area ","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"goal duflor …","code":""},{"path":"https://github.com/Claudius-Appel/duflor/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"can install development version duflor like :","code":"# FILL THIS IN! HOW CAN PEOPLE INSTALL YOUR DEV PACKAGE?"},{"path":"https://github.com/Claudius-Appel/duflor/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Plant Image Analysis For Determination of Leaf- and Root-Area ","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(duflor) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://github.com/Claudius-Appel/duflor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Claudius Appel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"function assigns clusters coordinate-pairs pixel.idx. cluster contains pixels share non-diagonal link .","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"","code":"adjacency(pixel.idx)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"pixel.idx pixel.idx-object","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add 4D-adjacency-grouping to pixel.idx-object — adjacency","text":"means points (1/1), (1/2) (2/2) assigned cluster, whereas points  (5/5) (6/6) assigned separate clusters. consider diagonal matches well, see diagonal_adjacency() Reference: https://stackoverflow.com//37946855","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/apply_hsv_color_to_image_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"apply hsv-color index-located pixels array","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/apply_hsv_color_to_image_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"","code":"apply_hsv_color_to_image_subset(   pixel.array,   pixel.idx,   target.color.hsv,   mask_extreme = FALSE )"},{"path":"https://github.com/Claudius-Appel/duflor/reference/apply_hsv_color_to_image_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color.hsv hsv-formatted color apply mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/apply_hsv_color_to_image_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply hsv-color to index-located pixels in array — apply_hsv_color_to_image_subset","text":"modified pixel.array","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/change_pixel_color_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"handles color-translation character-name hsv returns results duflor::apply_hsv_color_to_image_subset()","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/change_pixel_color_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"","code":"change_pixel_color_HSV(pixel.array, pixel.idx, target.color, mask_extreme)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/change_pixel_color_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/change_pixel_color_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"handles color-translation from character-name to hsv and returns results of duflor::apply_hsv_color_to_image_subset() — change_pixel_color_HSV","text":"pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/diagonal_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"function assigns clusters coordinate-pairs pixel.idx. cluster contains pixels share diagonal link .","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/diagonal_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"","code":"diagonal_adjacency(pixel.idx)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/diagonal_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"pixel.idx list declaring pixels target.color.hsv applied","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/diagonal_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/diagonal_adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add 8D-adjacency-grouping to pixel.idx-object — diagonal_adjacency","text":"means points (1/1), (1/2) (2/2) assigned cluster. Additionally, points  (5/5) (6/6) assigned cluster. consider diagonal matches well, see adjacency() Reference: https://stackoverflow.com//37946855","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/dot-main_args.html","id":null,"dir":"Reference","previous_headings":"","what":"pseudo-function to define default parameter documentation — .main_args","title":"pseudo-function to define default parameter documentation — .main_args","text":"pseudo-function define default parameter documentation","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/dot-main_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pseudo-function to define default parameter documentation — .main_args","text":"","code":".main_args(   pixel.array = NA,   pixel.idx = NA,   target.color = NA,   target.color.hsv = NA,   image.path = NA,   plot_indicator = NA,   get_indicator = NA,   mask_extreme = NA,   return_hsv = NA,   subset_only = NA,   upper_bound = NA,   lower_bound = NA,   crop_left = NA,   crop_right = NA,   crop_top = NA,   crop_bottom = NA )"},{"path":"https://github.com/Claudius-Appel/duflor/reference/dot-main_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pseudo-function to define default parameter documentation — .main_args","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() target.color.hsv hsv-formatted color apply image.path path image-file plot_indicator control whether indicator image plotted get_indicator control whether target pixels get colored indicator-images mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.) return_hsv TRUE default. Controls whether function returns pixel-data HSV-colorspace RGB subset_only want load subset range values upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values lower_bound see upper_bound crop_left number pixels crop left edge image crop_right see crop_left crop_top see crop_left crop_bottom see crop_left","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/dot-main_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pseudo-function to define default parameter documentation — .main_args","text":"nothing. function literally nothing ","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/duflor-package.html","id":null,"dir":"Reference","previous_headings":"","what":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","title":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","text":"Determine 2-dimensional plant area via known area identifier dot.","code":""},{"path":[]},{"path":"https://github.com/Claudius-Appel/duflor/reference/duflor-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"duflor: Plant Image Analysis For Determination of Leaf- and Root-Area — duflor-package","text":"Maintainer: Claudius Appel","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/extract_pixels_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — extract_pixels_HSV","title":"Title — extract_pixels_HSV","text":"Title","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/extract_pixels_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — extract_pixels_HSV","text":"","code":"extract_pixels_HSV(   pixel.array,   lower_bound,   upper_bound,   target.color = \"hotpink\",   get_indicator = FALSE,   plot_indicator = FALSE,   mask_extreme = FALSE,   return_hsv = TRUE )"},{"path":"https://github.com/Claudius-Appel/duflor/reference/extract_pixels_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — extract_pixels_HSV","text":"pixel.array image array loaded via duflor::load_image() lower_bound see upper_bound upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values target.color color rgb-format 0-255, member  colors() get_indicator control whether target pixels get colored indicator-images plot_indicator control whether indicator image plotted mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.) return_hsv TRUE default. Controls whether function returns pixel-data HSV-colorspace RGB","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/extract_pixels_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — extract_pixels_HSV","text":"EITHER: list-object following elements (supplying one one pair bounds) pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array list-object following elements (supplying one one pair bounds) pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array indicator.img - pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/func_new.html","id":null,"dir":"Reference","previous_headings":"","what":"a dummy function — func_new","title":"a dummy function — func_new","text":"even dummy documentation","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/func_new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a dummy function — func_new","text":"","code":"func_new(x, y)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/func_new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a dummy function — func_new","text":"x numeric y numeric","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/func_new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"a dummy function — func_new","text":"sum (x,y)","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/func_new.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"a dummy function — func_new","text":"","code":"func_new(1,2) #> Error in func_new(1, 2): could not find function \"func_new\""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_indicator_image.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"wrapper around change_pixel_color_HVS() intention clarity.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_indicator_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"","code":"get_indicator_image(pixel.array, pixel.idx, target.color, mask_extreme)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_indicator_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"pixel.array image array loaded via duflor::load_image() pixel.idx list declaring pixels target.color.hsv applied target.color color rgb-format 0-255, member  colors() mask_extreme default, hue- saturation-components applied pixels. Set argument TRUE also apply value. increase contrast image drastically, might result less favorable images.)","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_indicator_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around change_pixel_color_HVS() for the intention of clarity. — get_indicator_image","text":"pixel.array hsv-values pixels positions pixel.idx modified.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_unique_list_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"keys' contents considered. presence absence key relevant.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_unique_list_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"","code":"get_unique_list_elements(a, b)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_unique_list_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"list b list","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_unique_list_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"vector elements present either b.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/get_unique_list_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compare two lists and return all keys that are not present in both. — get_unique_list_elements","text":"","code":"duflor:::get_unique_list_elements(list(a = 1,b =2,c= 3),list(a = 1,b = 1,d = 3)) #> [1] \"c\" \"d\""},{"path":"https://github.com/Claudius-Appel/duflor/reference/HSVtoRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::HSVtoRGB() — HSVtoRGB","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"See imager::HSVtoRGB","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/HSVtoRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"","code":"HSVtoRGB(...)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/HSVtoRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::HSVtoRGB() — HSVtoRGB","text":"... Arguments passed imager::HSVtoRGB im image","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/load_image.html","id":null,"dir":"Reference","previous_headings":"","what":"load image as HSV or RGB-array — load_image","title":"load image as HSV or RGB-array — load_image","text":"load image HSV RGB-array","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/load_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load image as HSV or RGB-array — load_image","text":"","code":"load_image(   image.path,   subset_only = FALSE,   return_hsv = TRUE,   crop_left = 0,   crop_right = 0,   crop_top = 0,   crop_bottom = 0 )"},{"path":"https://github.com/Claudius-Appel/duflor/reference/load_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load image as HSV or RGB-array — load_image","text":"image.path path image-file subset_only want load subset range values return_hsv TRUE default. Controls whether function returns pixel-data HSV-colorspace RGB crop_left number pixels crop left edge image crop_right see crop_left crop_top see crop_left crop_bottom see crop_left","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/load_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load image as HSV or RGB-array — load_image","text":"hsv-formatted pixel.array, unless HSV==false.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/norm_to_range_01.html","id":null,"dir":"Reference","previous_headings":"","what":"normalise a vector to range 0-1 — norm_to_range_01","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"normalise vector range 0-1","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/norm_to_range_01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"","code":"norm_to_range_01(x)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/norm_to_range_01.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"x vector normalise range 0-1","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/norm_to_range_01.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"normalise a vector to range 0-1 — norm_to_range_01","text":"vector, normalised range 0-1","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/objs.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapper around object.size() — objs","title":"wrapper around object.size() — objs","text":"wrapper around object.size()","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/objs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapper around object.size() — objs","text":"","code":"objs(x)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/objs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapper around object.size() — objs","text":"x object retrive memory size ","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/objs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapper around object.size() — objs","text":"size x GB","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/objs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapper around object.size() — objs","text":"","code":"duflor:::objs(1:1:500000) #> 0.002000048 GB"},{"path":"https://github.com/Claudius-Appel/duflor/reference/pixels_to_area.html","id":null,"dir":"Reference","previous_headings":"","what":"convert pixel counts to an area based on the known area of an identifier-dot. — pixels_to_area","title":"convert pixel counts to an area based on the known area of an identifier-dot. — pixels_to_area","text":"convert pixel counts area based known area identifier-dot.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/pixels_to_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert pixel counts to an area based on the known area of an identifier-dot. — pixels_to_area","text":"","code":"pixels_to_area(pixel.counts)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/pixels_to_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert pixel counts to an area based on the known area of an identifier-dot. — pixels_to_area","text":"pixel.counts list containing following pixel-counts: \"green\" \"drought\" \"complete\" \"identifier\" pixel-count identifier must present, whereas others optional. calculated area internally unit-less. However, default value function also [cm^2]. assumed area identifier can modified excuting options(duflor.default_identifier_area = <value_in_square_centimeters>) prior calling function","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/pixels_to_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert pixel counts to an area based on the known area of an identifier-dot. — pixels_to_area","text":"list computed areas key listed pixel.counts. Additionally, two meta-values returned well: identifier-area used calculating area (whichever value set option duflor.default_identifier_area) area singe pixel values [cm^2]","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/plot_array_as_image_sRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"plot rgb-array via graphics-package","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/plot_array_as_image_sRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"","code":"plot_array_as_image_sRGB(rgb.array, main = \"title\")"},{"path":"https://github.com/Claudius-Appel/duflor/reference/plot_array_as_image_sRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"rgb.array rgb-formatted image-array. main title pot plot sub-title. usually rendered properly","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/plot_array_as_image_sRGB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"/","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/plot_array_as_image_sRGB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot an rgb-array via graphics-package — plot_array_as_image_sRGB","text":"","code":"if (FALSE) { plot_array_as_image_sRGB(     HSVtoRGB(         imager::load.example(\"parrots\")         ),     main = str_c(\"parrots-example\") ) }"},{"path":"https://github.com/Claudius-Appel/duflor/reference/prep_loading.html","id":null,"dir":"Reference","previous_headings":"","what":"Set java-parameters required for VM-setup. — prep_loading","title":"Set java-parameters required for VM-setup. — prep_loading","text":"Set java-parameters required VM-setup.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/prep_loading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set java-parameters required for VM-setup. — prep_loading","text":"","code":"prep_loading(gb = 8)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/prep_loading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set java-parameters required for VM-setup. — prep_loading","text":"gb integer number gigabytes heap-space assign Java environment.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/prep_loading.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set java-parameters required for VM-setup. — prep_loading","text":"call check_javaVM_setup()","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/rectangularRange_HSV.html","id":null,"dir":"Reference","previous_headings":"","what":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"Takes HSV-formatted pixel.array bounds. determining pixels lie within bounds, hue- saturation- values respected. value-component considered.","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/rectangularRange_HSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"","code":"rectangularRange_HSV(pixel.array, upper_bound, lower_bound)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/rectangularRange_HSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"pixel.array image array loaded via duflor::load_image() upper_bound EITHER: list upper HSV-bounds, e.g. list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)) single vector length 3 declaring set HSV-values lower_bound see upper_bound","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/rectangularRange_HSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"list-object following elements: pixel.idx - pixel-locations pixels detected lower upper bound. pixel.count - number pixels detected lower upper bound img.fraction - fraction image detected lower upper bound original.img - fed-pixel.array","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/rectangularRange_HSV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find pixels with color-values lying between upper_bound and lower_bound — rectangularRange_HSV","text":"","code":"if (FALSE) { rectangularRange_HSV(     pixel.array = pixel.array,     lower_bound = an_lower_bound,     upper_bound = an_upper_bound ) }"},{"path":"https://github.com/Claudius-Appel/duflor/reference/retrieve_adjacency_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"return coordinates cluster_id pixel.idx","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/retrieve_adjacency_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"","code":"retrieve_adjacency_coords(pixel.idx, cluster_id)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/retrieve_adjacency_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"pixel.idx list declaring pixels target.color.hsv applied cluster_id index --retrieved cluster","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/retrieve_adjacency_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"pixel.idx added 3rd column clus mapping cluster","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/retrieve_adjacency_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return coordinates by cluster_id from pixel.idx — retrieve_adjacency_coords","text":"","code":"if (FALSE) { pixels <- extract_pixels_HSV(...) # extract pixels of a certain color-range adjacency <- adjacency(pixels$identifier$pixel.idx) # assign clusters coords <- retrieve_adjacency_coords(adjacency,1) # retrieve coordinates of first cluster  plot_array_as_image_sRGB( # display result     HSVtoRGB(         change_pixel_color_HSV(             pixel.array,             coords,             target.color = \"white\",             mask_extreme = T             )         )     ) }"},{"path":"https://github.com/Claudius-Appel/duflor/reference/RGBtoHSV.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::RGBtoHSV() — RGBtoHSV","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"See imager::RGBtoHSV","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/RGBtoHSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"","code":"RGBtoHSV(...)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/RGBtoHSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::RGBtoHSV() — RGBtoHSV","text":"... Arguments passed imager::RGBtoHSV im image","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/sRGBtoRGB.html","id":null,"dir":"Reference","previous_headings":"","what":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"See imager::sRGBtoRGB","code":""},{"path":"https://github.com/Claudius-Appel/duflor/reference/sRGBtoRGB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"","code":"sRGBtoRGB(...)"},{"path":"https://github.com/Claudius-Appel/duflor/reference/sRGBtoRGB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"mirror of imager::sRGBtoRGB() — sRGBtoRGB","text":"... Arguments passed imager::sRGBtoRGB im image","code":""}]
