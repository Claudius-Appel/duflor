// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rectangularRange_HSV_cpp
DataFrame rectangularRange_HSV_cpp(NumericVector H, NumericVector S, NumericVector V, std::vector<double> upper_bound, std::vector<double> lower_bound, int image_width, bool check_V);
RcppExport SEXP _duflor_rectangularRange_HSV_cpp(SEXP HSEXP, SEXP SSEXP, SEXP VSEXP, SEXP upper_boundSEXP, SEXP lower_boundSEXP, SEXP image_widthSEXP, SEXP check_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< int >::type image_width(image_widthSEXP);
    Rcpp::traits::input_parameter< bool >::type check_V(check_VSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangularRange_HSV_cpp(H, S, V, upper_bound, lower_bound, image_width, check_V));
    return rcpp_result_gen;
END_RCPP
}
// rectangularRange_HSV_cpp2
DataFrame rectangularRange_HSV_cpp2(NumericVector H, NumericVector S, NumericVector V, std::vector<double> upper_bound, std::vector<double> lower_bound, int image_width);
RcppExport SEXP _duflor_rectangularRange_HSV_cpp2(SEXP HSEXP, SEXP SSEXP, SEXP VSEXP, SEXP upper_boundSEXP, SEXP lower_boundSEXP, SEXP image_widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< int >::type image_width(image_widthSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangularRange_HSV_cpp2(H, S, V, upper_bound, lower_bound, image_width));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_duflor_rectangularRange_HSV_cpp", (DL_FUNC) &_duflor_rectangularRange_HSV_cpp, 7},
    {"_duflor_rectangularRange_HSV_cpp2", (DL_FUNC) &_duflor_rectangularRange_HSV_cpp2, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_duflor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
