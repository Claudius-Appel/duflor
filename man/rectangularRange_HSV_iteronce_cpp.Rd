% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{rectangularRange_HSV_iteronce_cpp}
\alias{rectangularRange_HSV_iteronce_cpp}
\title{optimised 'C++'-implementation of \code{\link[=rectangularRange_HSV]{rectangularRange_HSV()}}}
\usage{
rectangularRange_HSV_iteronce_cpp(
  H,
  S,
  V,
  upper_bound,
  lower_bound,
  image_width,
  check_V
)
}
\arguments{
\item{H}{respective component of a \code{pixel.array}}

\item{S}{respective component of a \code{pixel.array}}

\item{V}{respective component of a \code{pixel.array}}

\item{upper_bound}{EITHER:
\itemize{
\item \strong{matrix} of upper HSV-bounds, e.g. \code{do.call(rbind,list(green = c(H_green_lower,S_green_lower,V_green_lower),drought = c(H_drought_lower,S_drought_lower,V_drought_lower)))}
\item single vector of length 3 declaring a set of HSV-values
}}

\item{lower_bound}{see \code{upper_bound}}

\item{image_width}{Width of \code{pixel.array}, as returned via \code{dim(pixel.array)[1]}}

\item{check_V}{boolean toggle to also check the \code{VALUE}-component of an HSV-pixel}
}
\value{
A list-object with the following elements (when supplying one one pair of bounds)
\itemize{
\item \code{pixel.idx} - pixel-locations of pixels detected between lower and upper bound.
}

Upon failure to find any matching pixels, an empty matrix of dimensions \verb{[0, 1:2]} is returned.
}
\description{
optimised 'C++'-implementation of \code{\link[=rectangularRange_HSV]{rectangularRange_HSV()}}
}
\note{
The use of  \code{\link[=rectangularRange_HSV]{rectangularRange_HSV()}} & \code{\link[=rectangularRange_HSV_cpp]{rectangularRange_HSV_cpp()}} is strongly discouraged in favour of this function,
due to its drastically slower execution.
}
\examples{
\dontrun{
library(duflor)
## load example data
file_path <- load_extdata("duflor-icon.png")
pixel.array <- load_image(file_path,F,T)
spectrums <- getOption("duflor.default_hsv_spectrums")

## convert spectrums to matrix
nlb <- do.call(rbind,spectrums$lower_bound)
nub <- do.call(rbind,spectrums$upper_bound)

## strip dimnames-attributes
dimnames(nlb) <- c()
dimnames(nub) <- c()
## extract matches
result <- rectangularRange_HSV_iteronce_cpp(H = pixel.array[,,,1],
                                            S = pixel.array[,,,2],
                                            V = pixel.array[,,,3],
                                            upper_bound = nub,
                                            lower_bound = nlb,
                                            image_width = dim(pixel.array)[1],
                                            check_V = T)
## add names to results-matrix.
names(result) <- names(spectrums$lower_bound)
}
}
